#!/bin/bash
logFile="/app/logs/docker-cli.log"

function logIt() {
	timestamp=$( date )
	if [ -z "$2" ];then
		severity="INFO"
	else
		severity="$2"
	fi
	hostname=`hostname`
	openssl_version=`openssl version`
	facility_label="user-level"
	facility=1
	echo "{ \"timestamp\": \"$timestamp\", \"host\": \"${hostname}\", \"server_software\": [ \"${openssl_version}\" ], \"facility_label\": \"${facility_label}\", \"severity\":\"$severity\", \"message\": \"$1\" }" >> $logFile
}

function initStorage() {
	mkdir -p /storage/lib
	mv /var/lib/elasticsearch /storage/lib
	echo " - elasticsearch has been moved to storage locker"
}

function linkStorage() {
	if [[ -d "/var/lib/elasticsearch" ]];then
		rm -rf /var/lib/elasticsearch
	fi
	ln -s /storage/lib/elasticsearch /var/lib/elasticsearch
	echo " - elasticsearch symlinks established"
}

function startServices() {
	# service rsyslog start
	service redis-server start
	# make sure redis log file readable (default was 550)
	chmod 664 /var/log/redis/redis-server.log
	# let's get elastic
	/etc/init.d/elasticsearch start
	# and stashful
	service logstash start
	/opt/logstash/bin/logstash web &
}

case "$1" in
	cert)
		cat /app/certs/server.crt
		logIt "request for SSL CRT certificate from CLI"
		exit 0;
	;;
	*)
		# Link up storage so state is maintained beyond just this running container
		if [[ -d "/storage/lib" ]];then
			echo "Storage appears to be already existant";
			linkStorage;
		else
			echo "Storage container has not been initialised ...";
			initStorage;
			linkStorage;
		fi
		startServices;
		logIt "logstash services started using CLI" 

		trap "echo Exiting Logstash Server; service logstash stop; service elasticsearch stop; service redis stop; exit 0;" SIGINT SIGTERM SIGTSTP
		while true; do
			sleep 1;
		done
	;;
esac

